#!/bin/bash
set -euo pipefail

# OBS Retention Cleanup Script v2.1

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
OBS_BUCKET="black-box"
OBS_CONFIG_FILE="$HOME/.obsutilconfig"
RETENTION_DAYS=29
OBS_BASE_PATH="DB"
DRY_RUN=false  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–ï–ê–õ–¨–ù–û–ï —É–¥–∞–ª–µ–Ω–∏–µ

# ==================== –§–£–ù–ö–¶–ò–ò ====================
log() {
    local message="$*"
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] ${message}" >&2
}

print_separator() {
    echo "============================================================" >&2
}

check_deps() {
    local missing=()
    for cmd in obsutil date; do
        if ! command -v "$cmd" &>/dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -gt 0 ]; then
        log "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missing[*]}"
        exit 1
    fi
    log "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"

    if [ ! -f "$OBS_CONFIG_FILE" ]; then
        log "‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª obsutil –Ω–µ –Ω–∞–π–¥–µ–Ω: $OBS_CONFIG_FILE"
        exit 1
    fi
}

check_s3_connection() {
    log "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OBS S3 (bucket: ${OBS_BUCKET})..."
    
    if obsutil ls "obs://${OBS_BUCKET}" -config="$OBS_CONFIG_FILE" >/dev/null 2>&1; then
        log "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OBS S3 —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        return 0
    else
        log "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OBS S3"
        exit 1
    fi
}

is_valid_date() {
    local date_str="$1"
    if [[ "$date_str" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        date -d "$date_str" >/dev/null 2>&1
        return $?
    fi
    return 1
}

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
find_host_directories() {
    local base_path="$1"
    log "üîç –ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ ${base_path}"
    
    local listing
    if ! listing=$(obsutil ls "obs://${OBS_BUCKET}/${base_path}" -d -config="$OBS_CONFIG_FILE" 2>/dev/null); then
        return
    fi
    
    while IFS= read -r line; do
        if [[ "$line" == *"obs://${OBS_BUCKET}/${base_path}/"* && "$line" != *"obs://${OBS_BUCKET}/${base_path}/" ]]; then
            local dir_name="${line#*obs://${OBS_BUCKET}/${base_path}/}"
            dir_name="${dir_name%/}"
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
            if [[ ! "$dir_name" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                log "üè∑Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ö–æ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${base_path}/${dir_name}"
                echo "${base_path}/${dir_name}"
            fi
        fi
    done <<< "$listing"
}

# –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –¥–∞—Ç–∞–º–∏
find_date_directories() {
    local current_path="$1"
    local cutoff_date="$2"
    local dirs_to_process=()
    
    log "üìÖ –ü–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –≤ ${current_path}"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –ø—É—Ç–∏
    local listing
    if ! listing=$(obsutil ls "obs://${OBS_BUCKET}/${current_path}" -d -config="$OBS_CONFIG_FILE" 2>/dev/null); then
        return
    fi
    
    # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    while IFS= read -r line; do
        if [[ "$line" == *"obs://${OBS_BUCKET}/${current_path}/"* && "$line" != *"obs://${OBS_BUCKET}/${current_path}/" ]]; then
            local dir_name="${line#*obs://${OBS_BUCKET}/${current_path}/}"
            dir_name="${dir_name%/}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–∞—Ç–æ–π (YYYY-MM-DD)
            if [[ "$dir_name" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
                if [[ "$dir_name" < "$cutoff_date" ]]; then
                    log "üóëÔ∏è –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –∫–∞—Ç–∞–ª–æ–≥: ${current_path}/${dir_name} (–¥–∞—Ç–∞: ${dir_name})"
                    echo "${current_path}/${dir_name} ${dir_name}"
                else
                    log "‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: ${current_path}/${dir_name} (–¥–∞—Ç–∞: ${dir_name})"
                fi
            else
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                dirs_to_process+=("${current_path}/${dir_name}")
            fi
        fi
    done <<< "$listing"
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏
    for subdir in "${dirs_to_process[@]}"; do
        find_date_directories "$subdir" "$cutoff_date"
    done
}

find_date_folders() {
    local base_path="$1"
    local cutoff_date=$(date -d "-${RETENTION_DAYS} days" +%Y-%m-%d)
    
    log "üîç –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å –¥–∞—Ç–∞–º–∏ –≤ ${base_path}"
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ö–æ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    while IFS= read -r host_path; do
        if [ -n "$host_path" ]; then
            # –î–ª—è –∫–∞–∂–¥–æ–π —Ö–æ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ —Å –¥–∞—Ç–∞–º–∏
            find_date_directories "$host_path" "$cutoff_date"
        fi
    done < <(find_host_directories "$base_path")
}

get_folder_size() {
    local folder_path="$1"
    local total_size_bytes=0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–∞–ª–æ–≥–µ
    local output=$(obsutil ls "obs://${OBS_BUCKET}/${folder_path}/" -config="$OBS_CONFIG_FILE" 2>/dev/null)
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º —Ä–∞–∑–º–µ—Ä–æ–º
    if [[ "$output" =~ Total\ size\ of\ prefix\ .*\ is:\ ([0-9.]+)([KMGT]?B) ]]; then
        local size_value="${BASH_REMATCH[1]}"
        local size_unit="${BASH_REMATCH[2]}"
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã
        case "$size_unit" in
            "B")   total_size_bytes=$(echo "$size_value" | awk '{printf "%.0f", $1}') ;;
            "KB")  total_size_bytes=$(echo "$size_value * 1024" | bc | awk '{printf "%.0f", $1}') ;;
            "MB")  total_size_bytes=$(echo "$size_value * 1024 * 1024" | bc | awk '{printf "%.0f", $1}') ;;
            "GB")  total_size_bytes=$(echo "$size_value * 1024 * 1024 * 1024" | bc | awk '{printf "%.0f", $1}') ;;
            "TB")  total_size_bytes=$(echo "$size_value * 1024 * 1024 * 1024 * 1024" | bc | awk '{printf "%.0f", $1}') ;;
            *)     total_size_bytes=0 ;;
        esac
    fi
    
    echo "$total_size_bytes"
}

show_deletion_summary() {
    local folders=("$@")
    local total_count=${#folders[@]}
    local total_size=0
    
    if [ $total_count -eq 0 ]; then
        log "‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        return 1
    fi
    
    echo ""
    echo "üìã –ù–ê–ô–î–ï–ù–û –ö–ê–¢–ê–õ–û–ì–û–í –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø: ${total_count}" >&2
    echo "=============================================================================" >&2
    echo "‚Ññ   | –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∞                               | –†–∞–∑–º–µ—Ä" >&2
    echo "=============================================================================" >&2
    
    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
    for i in "${!folders[@]}"; do
        local folder="${folders[$i]}"
        local folder_size=$(get_folder_size "$folder")
        total_size=$((total_size + folder_size))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö (–∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è)
        local formatted_size=$(numfmt --to=iec "$folder_size" | sed 's/,/./g')
        
        printf "%-3d | %-50s | %10s\n" \
            "$((i+1))" \
            "$folder" \
            "$formatted_size" >&2
    done
    
    echo "=============================================================================" >&2
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ç–æ–∂–µ –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö
    local formatted_total_size=$(numfmt --to=iec "$total_size" | sed 's/,/./g')
    echo "üìä –û–ë–©–ò–ô –†–ê–ó–ú–ï–†: $formatted_total_size" >&2
    echo "üìÖ –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ: ${total_count} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Å—Ç–∞—Ä—à–µ ${RETENTION_DAYS} –¥–Ω–µ–π" >&2
    
    if [[ "$DRY_RUN" == true ]]; then
        echo ""
        log "üîí DRY-RUN: –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)"
        return 1
    fi
    
    return 0
}

confirm_deletion() {
    local folders=("$@")
    
    if [ ${#folders[@]} -eq 0 ]; then
        return 1
    fi
    
    echo "" >&2
    
    # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è dry-run —Ä–µ–∂–∏–º–∞
    if [[ "$DRY_RUN" == true ]]; then
        return 1
    fi
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    log "üöÄ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤..."
    return 0
}

delete_folders() {
    local folders=("$@")
    local deleted_count=0
    local total_freed=0
    
    log "\nüóëÔ∏è –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤..."
    
    for folder in "${folders[@]}"; do
        local folder_size=$(get_folder_size "$folder")
        log "üî® –£–¥–∞–ª–µ–Ω–∏–µ: ${folder} ($(numfmt --to=iec "$folder_size"))"
        
        if obsutil rm "obs://${OBS_BUCKET}/${folder}/" -config="$OBS_CONFIG_FILE" -f -r >/dev/null 2>&1; then
            ((deleted_count++))
            total_freed=$((total_freed + folder_size))
            log "‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${folder}"
        else
            log "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${folder}"
        fi
    done
    
    echo "$deleted_count $total_freed"
}

clean_empty_directories() {
    if [[ "$DRY_RUN" == true ]]; then
        log "üîí DRY-RUN: –ü—Ä–æ–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"
        return
    fi
    
    log "üßΩ –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    # –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Ö–æ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    while IFS= read -r host_path; do
        if [ -n "$host_path" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∏ –≤ —Ö–æ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            local has_subdirs=$(obsutil ls "obs://${OBS_BUCKET}/${host_path}/" -d -config="$OBS_CONFIG_FILE" 2>/dev/null | \
                               grep -c "obs://${OBS_BUCKET}/${host_path}/")
            
            if [ "$has_subdirs" -eq 0 ]; then
                log "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Ö–æ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${host_path}"
                obsutil rm "obs://${OBS_BUCKET}/${host_path}/" -config="$OBS_CONFIG_FILE" -f -folder >/dev/null 2>&1 || true
            fi
        fi
    done < <(find_host_directories "$OBS_BASE_PATH")
}

show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
    echo "Options:"
    echo "  -b, --bucket      –ò–º—è –±–∞–∫–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: black-box)"
    echo "  -d, --path        –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: DB)"
    echo "  -r, --retention   –î–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 29)"
    echo "  -c, --config      –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É obsutil"
    echo "  -n, --dry-run     –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä, –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è"
    echo "  -h, --help        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                # –†–µ–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  $0 -n             # Dry-run —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)"
    echo "  $0 -r 60          # –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π"
}

# ==================== –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ====================
main() {
    log "=== –ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –ë–≠–ö–ê–ü–û–í –í OBS ==="
    log "ü™£ –ë–∞–∫–µ—Ç: $OBS_BUCKET"
    log "üìÖ –£–¥–µ—Ä–∂–∞–Ω–∏–µ: $RETENTION_DAYS –¥–Ω–µ–π"
    log "üìÅ –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: $OBS_BASE_PATH"
    
    if [[ "$DRY_RUN" == true ]]; then
        log "üîí –†–ï–ñ–ò–ú: DRY-RUN (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)"
    else
        log "üöÄ –†–ï–ñ–ò–ú: –†–ï–ê–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï"
    fi
    
    log "‚è∞ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: $(date '+%Y-%m-%d')"
    log "üìÖ –î–∞—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏—è: $(date -d "-${RETENTION_DAYS} days" '+%Y-%m-%d')"
    
    check_deps
    check_s3_connection
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ç–∞–ª–æ–≥–∏ —Å –¥–∞—Ç–∞–º–∏
    local folders_to_delete=()
    while IFS= read -r line; do
        if [ -n "$line" ]; then
            read -r path date_str <<< "$line"
            folders_to_delete+=("$path")
        fi
    done < <(find_date_folders "$OBS_BASE_PATH")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ —É–¥–∞–ª—è—Ç—å
    if ! show_deletion_summary "${folders_to_delete[@]}"; then
        if [ ${#folders_to_delete[@]} -eq 0 ]; then
            log "‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)"
        fi
        return 0
    fi
    
    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–ª—è dry-run –≤—ã—Ö–æ–¥–∏–º
    if confirm_deletion "${folders_to_delete[@]}"; then
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
        result=$(delete_folders "${folders_to_delete[@]}")
        read -r deleted_count total_freed <<< "$result"
        
        # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        clean_empty_directories
        
        log "\n=== –ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò ==="
        log "üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: ${deleted_count}"
        log "üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: $(numfmt --to=iec "$total_freed")"
        log "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    else
        if [[ "$DRY_RUN" == true ]] && [ ${#folders_to_delete[@]} -gt 0 ]; then
            log "\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ DRY-RUN ==="
            log "üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${#folders_to_delete[@]}"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
            total_size=0
            for folder in "${folders_to_delete[@]}"; do
                folder_size=$(get_folder_size "$folder")
                total_size=$((total_size + folder_size))
            done
            
            log "üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $(numfmt --to=iec "$total_size")"
            log "üîí –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ –æ–ø—Ü–∏–∏ -n –∏–ª–∏ --dry-run"
        fi
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        -b|--bucket)
            OBS_BUCKET="$2"
            shift 2
            ;;
        -d|--path)
            OBS_BASE_PATH="$2"
            shift 2
            ;;
        -r|--retention)
            RETENTION_DAYS="$2"
            shift 2
            ;;
        -c|--config)
            OBS_CONFIG_FILE="$2"
            shift 2
            ;;
        -n|--dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1" >&2
            show_help
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
if ! main; then
    log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏!"
    exit 1
fi

exit 0